{
  "32": {
    "diff": "easy",
    "result_prompts": "from scipy.optimize import brentq\n\ndef find_zero(xs: list):\n    def f(x):\n        return poly(xs, x)\n    return brentq(f, -100, 100)",
    "result_tests": "import unittest\nimport numpy as np\n\nclass TestFindZero1(unittest.TestCase):\n\n    def test_find_zero(self):\n        xs = [1, -6, 11, -6]\n        result = find_zero(xs)\n        self.assertAlmostEqual(result, 1.0, places=5)\n\n*****\n\nimport unittest\nimport numpy as np\n\nclass TestFindZero2(unittest.TestCase):\n\n    def test_find_zero(self):\n        xs = [1, -10, 35, -50, 24]\n        result = find_zero(xs)\n        self.assertAlmostEqual(result, 2.0, places=5)"
  },
  "34": {
    "diff": "easy",
    "result_prompts": "def unique(l: list):\n    return sorted(set(l))",
    "result_tests": "import unittest\nfrom typing import List\n\nclass TestUniqueFunction(unittest.TestCase):\n    def test_unique(self):\n        self.assertEqual(unique([1, 2, 2, 3, 4, 4, 5]), [1, 2, 3, 4, 5])\n        self.assertEqual(unique(['a', 'b', 'c', 'c', 'd', 'd']), ['a', 'b', 'c', 'd'])\n*****\nimport unittest\nfrom typing import List\n\nclass TestUniqueFunctionEdgeCases(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(unique([]), [])\n\n    def test_single_element_list(self):\n        self.assertEqual(unique([1]), [1])"
  },
  "38": {
    "diff": "easy",
    "result_prompts": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
    "result_tests": "import unittest\n\nclass TestDecodeCyclic1(unittest.TestCase):\n    def test_decode_cyclic(self):\n        self.assertEqual(decode_cyclic(\"abc\"), \"bca\")\n        self.assertEqual(decode_cyclic(\"abcd\"), \"bcdab\")\n        self.assertEqual(decode_cyclic(\"\"), \"\")\n\n*****\nimport unittest\n\nclass TestDecodeCyclic2(unittest.TestCase):\n    def test_decode_cyclic(self):\n        self.assertEqual(decode_cyclic(\"abcdefghi\"), \"bcaefdihg\")\n        self.assertEqual(decode_cyclic(\"abcdefgh\"), \"bcaefdihg\")\n        self.assertEqual(decode_cyclic(\"abcdefg\"), \"bcaefdgb\")"
  },
  "45": {
    "diff": "easy",
    "result_prompts": "def triangle_area(a, h):\n    return 0.5 * a * h",
    "result_tests": "import unittest\nimport math\n\nclass TestTriangleArea1(unittest.TestCase):\n    def test_triangle_area(self):\n        self.assertAlmostEqual(triangle_area(5, 6), 15)\n        self.assertAlmostEqual(triangle_area(0, 6), 0)\n        self.assertAlmostEqual(triangle_area(-5, 6), -15)\n        \n*****\nimport unittest\nimport math\n\nclass TestTriangleArea2(unittest.TestCase):\n    def test_triangle_area(self):\n        self.assertAlmostEqual(triangle_area(10, 10), 50)\n        self.assertAlmostEqual(triangle_area(0, 0), 0)\n        self.assertAlmostEqual(triangle_area(-10, -10), 50)"
  },
  "50": {
    "diff": "easy",
    "result_prompts": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
    "result_tests": "import unittest\n\nclass TestCaesarCipher1(unittest.TestCase):\n    def test_caesar_cipher(self):\n        self.assertEqual(\"khoor\", self.caesar_cipher(\"oruuc\"))\n        \n    def setUp(self):\n        def caesar_cipher(s):\n            return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n        self.caesar_cipher = caesar_cipher\n\n*****\n\nimport unittest\n\nclass TestCaesarCipher2(unittest.TestCase):\n    def test_caesar_cipher(self):\n        self.assertEqual(\"zruog\", self.caesar_cipher(\"bcvbf\"))\n        \n    def setUp(self):\n        def caesar_cipher(s):\n            return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n        self.caesar_cipher = caesar_cipher"
  },
  "83": {
    "diff": "easy",
    "result_prompts": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count",
    "result_tests": "import unittest\n\nclass TestStartsOneEnds1(unittest.TestCase):\n    def test_starts_one_ends(self):\n        self.assertEqual(starts_one_ends(1), 2)\n        self.assertEqual(starts_one_ends(2), 20)\n        self.assertEqual(starts_one_ends(3), 300)\n\n*****\n\nimport unittest\n\nclass TestStartsOneEnds2(unittest.TestCase):\n    def test_starts_one_ends_edge_cases(self):\n        self.assertEqual(starts_one_ends(0), 0)\n        self.assertEqual(starts_one_ends(-1), 0)\n        self.assertEqual(starts_one_ends(-10), 0)"
  },
  "162": {
    "diff": "easy",
    "result_prompts": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
    "result_tests": "class TestStringToMd5:\n    import unittest\n    import hashlib\n\n    def test_string_to_md5(self):\n        self.assertIsNone(self.string_to_md5(\"\"))\n        self.assertEqual(self.string_to_md5(\"Hello, World!\"), \"65a8e27d8879283831b664bd8b7f0ad4\")\n\n*****\nclass TestStringToMd5EdgeCases:\n    import unittest\n    import hashlib\n\n    def test_string_to_md5_edge_cases(self):\n        self.assertEqual(self.string_to_md5(\"a\"), \"0cc175b9c0f1b6a831c399e269772661\")\n        self.assertEqual(self.string_to_md5(\"1234567890\"), \"e10adc3949ba59abbe56e057f20f883e\")"
  },
  "28": {
    "diff": "easy",
    "result_prompts": "return ''.join(strings)",
    "result_tests": "import unittest\n\nclass TestJoinStrings(unittest.TestCase):\n    def test_join_strings(self):\n        strings = [\"Hello\", \" \", \"World\"]\n        self.assertEqual(''.join(strings), \"Hello World\")\n\n*****\n\nimport unittest\n\nclass TestJoinEmptyStrings(unittest.TestCase):\n    def test_join_empty_strings(self):\n        strings = [\"\", \"\", \"\"]\n        self.assertEqual(''.join(strings), \"\")"
  },
  "29": {
    "diff": "easy",
    "result_prompts": "return [s for s in strings if s.startswith(prefix)]",
    "result_tests": "import unittest\n\nclass TestStartsWithPrefix(unittest.TestCase):\n    def test_startswith_prefix(self):\n        strings = [\"hello\", \"world\", \"hellothere\", \"goodbye\"]\n        prefix = \"hello\"\n        self.assertEqual([s for s in strings if s.startswith(prefix)], [\"hello\", \"hellothere\"])\n\n*****\n\nimport unittest\n\nclass TestStartsWithPrefixEmpty(unittest.TestCase):\n    def test_startswith_prefix_empty(self):\n        strings = [\"hello\", \"world\", \"hellothere\", \"goodbye\"]\n        prefix = \"abc\"\n        self.assertEqual([s for s in strings if s.startswith(prefix)], [])"
  },
  "33": {
    "diff": "moderate",
    "result_prompts": "def sort_third(l: list):\n    l_third = [x for i, x in enumerate(l) if i % 3 != 0]\n    l_not_third = sorted([x for i, x in enumerate(l) if i % 3 == 0])\n    result = []\n    third_index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(l_not_third[third_index])\n            third_index += 1\n        else:\n            result.append(l_third.pop(0))\n    return result",
    "result_tests": "import unittest\nfrom typing import List\n\nclass TestSortThird1(unittest.TestCase):\n    def test_sort_third(self):\n        input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        expected_output = [1, 4, 2, 7, 3, 10, 5, 13, 6]\n        self.assertEqual(sort_third(input_list), expected_output)\n\n*****\n\nimport unittest\nfrom typing import List\n\nclass TestSortThird2(unittest.TestCase):\n    def test_sort_third(self):\n        input_list = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n        expected_output = [10, 40, 20, 70, 30, 100, 50, 130, 60]\n        self.assertEqual(sort_third(input_list), expected_output)\n\n*****\n\nimport unittest\nfrom typing import List\n\nclass TestSortThird3(unittest.TestCase):\n    def test_sort_third(self):\n        input_list = [1, 1, 1, 1, 1, 1, 1, 1, 1]\n        expected_output = [1, 1, 1, 1, 1, 1, 1, 1, 1]\n        self.assertEqual(sort_third(input_list), expected_output)"
  },
  "37": {
    "diff": "moderate",
    "result_prompts": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    result = [None] * len(l)\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result[i] = even_values.pop(0)\n        else:\n            result[i] = l[i]\n    return result",
    "result_tests": "import unittest\nclass TestSortEven1(unittest.TestCase):\n    def test_sort_even(self):\n        self.assertEqual(sort_even([5, 2, 9, 1, 7, 6]), [1, 5, 2, 9, 6, 7])\n\n*****\n\nimport unittest\nclass TestSortEven2(unittest.TestCase):\n    def test_sort_even_empty(self):\n        self.assertEqual(sort_even([]), [])\n\n*****\n\nimport unittest\nclass TestSortEven3(unittest.TestCase):\n    def test_sort_even_single(self):\n        self.assertEqual(sort_even([5]), [5])"
  },
  "42": {
    "diff": "moderate",
    "result_prompts": "def incr_list(l: list):\n    return [i + 1 for i in l]",
    "result_tests": "import unittest\nclass TestIncrList(unittest.TestCase):\n    def test_incr_list(self):\n        self.assertEqual(incr_list([1, 2, 3]), [2, 3, 4])\n*****\nimport unittest\nclass TestIncrListEmpty(unittest.TestCase):\n    def test_incr_list_empty(self):\n        self.assertEqual(incr_list([]), [])\n*****\nimport unittest\nclass TestIncrListNegative(unittest.TestCase):\n    def test_incr_list_negative(self):\n        self.assertEqual(incr_list([-1, -2, -3]), [0, -1, -2])"
  },
  "53": {
    "diff": "moderate",
    "result_prompts": "def add(x: int, y: int) -> int:\n    return x + y",
    "result_tests": "import unittest\n\nclass TestAddPositiveNumbers(unittest.TestCase):\n    def test_add_two_positive_numbers(self):\n        self.assertEqual(add(2, 3), 5)\n    def test_add_one_positive_and_zero(self):\n        self.assertEqual(add(2, 0), 2)\n\n*****\n\nimport unittest\n\nclass TestAddNegativeNumbers(unittest.TestCase):\n    def test_add_two_negative_numbers(self):\n        self.assertEqual(add(-2, -3), -5)\n    def test_add_one_negative_and_zero(self):\n        self.assertEqual(add(-2, 0), -2)\n\n*****\n\nimport unittest\n\nclass TestAddMixedNumbers(unittest.TestCase):\n    def test_add_positive_and_negative_numbers(self):\n        self.assertEqual(add(2, -3), -1)\n    def test_add_negative_and_positive_numbers(self):\n        self.assertEqual(add(-2, 3), 1)"
  },
  "59": {
    "diff": "moderate",
    "result_prompts": "def largest_prime_factor(n: int):\n    def is_prime(m: int) -> bool:\n        if m < 2:\n            return False\n        for i in range(2, int(m ** 0.5) + 1):\n            if m % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    factors.sort(reverse=True)\n    for factor in factors:\n        if is_prime(factor):\n            return factor",
    "result_tests": "import unittest\n\nclass TestLargestPrimeFactor1(unittest.TestCase):\n    def test_largest_prime_factor(self):\n        self.assertEqual(largest_prime_factor(13195), 29)\n        self.assertEqual(largest_prime_factor(6475143), 2417)\n\n*****\n\nimport unittest\n\nclass TestLargestPrimeFactor2(unittest.TestCase):\n    def test_largest_prime_factor(self):\n        self.assertEqual(largest_prime_factor(10), 5)\n        self.assertEqual(largest_prime_factor(17), 17)\n\n*****\n\nimport unittest\n\nclass TestLargestPrimeFactor3(unittest.TestCase):\n    def test_largest_prime_factor(self):\n        self.assertEqual(largest_prime_factor(2), 2)\n        self.assertEqual(largest_prime_factor(3), 3)"
  },
  "69": {
    "diff": "moderate",
    "result_prompts": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_num = -1\n    for num, count in freq.items():\n        if count >= num and num > max_num:\n            max_num = num\n    return max_num",
    "result_tests": "import unittest\n\nclass TestSearch1(unittest.TestCase):\n    def test_search(self):\n        self.assertEqual(search([1, 2, 3, 4, 5]), 5)\n        self.assertEqual(search([5, 5, 5, 5, 5]), 5)\n        self.assertEqual(search([1, 1, 1, 1, 1]), 1)\n\n*****\n\nimport unittest\n\nclass TestSearch2(unittest.TestCase):\n    def test_search(self):\n        self.assertEqual(search([10, 20, 30, 40, 50]), 50)\n        self.assertEqual(search([5, 10, 15, 20, 25]), 25)\n        self.assertEqual(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 10)\n\n*****\n\nimport unittest\n\nclass TestSearch3(unittest.TestCase):\n    def test_search(self):\n        self.assertEqual(search([-1, -2, -3, -4, -5]), -1)\n        self.assertEqual(search([0, 0, 0, 0, 0]), 0)\n        self.assertEqual(search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 1)"
  },
  "90": {
    "diff": "moderate",
    "result_prompts": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = list(set(lst))\n    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]",
    "result_tests": "import unittest\nclass TestNextSmallest1(unittest.TestCase):\n    def test_next_smallest(self):\n        self.assertIsNone(next_smallest([5]))\n*****\nimport unittest\nclass TestNextSmallest2(unittest.TestCase):\n    def test_next_smallest(self):\n        self.assertEqual(next_smallest([5, 2, 8, 12, 3]), 3)\n*****\nimport unittest\nclass TestNextSmallest3(unittest.TestCase):\n    def test_next_smallest(self):\n        self.assertEqual(next_smallest([10, 10, 10]), None)"
  },
  "91": {
    "diff": "moderate",
    "result_prompts": "def is_bored(S):\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    return sum(1 for sentence in sentences if sentence and sentence.strip().startswith('I'))",
    "result_tests": "import unittest\n\nclass TestIsBored1(unittest.TestCase):\n    def test_is_bored(self):\n        self.assertEqual(is_bored(\"I am bored. You are not.\"), 1)\n\n*****\n\nimport unittest\n\nclass TestIsBored2(unittest.TestCase):\n    def test_is_bored(self):\n        self.assertEqual(is_bored(\"I am bored! I am very bored.\"), 2)\n\n*****\n\nimport unittest\n\nclass TestIsBored3(unittest.TestCase):\n    def test_is_bored(self):\n        self.assertEqual(is_bored(\"You are bored. I am not.\"), 0)"
  },
  "94": {
    "diff": "moderate",
    "result_prompts": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max([x for x in lst if is_prime(x)])\n    return sum(int(digit) for digit in str(max_prime))",
    "result_tests": "import unittest\n\nclass TestSkjkasdkd1(unittest.TestCase):\n    def test_skjkasdkd(self):\n        self.assertEqual(skjkasdkd([1, 2, 3, 4, 5, 6, 7]), 7)\n*****\nimport unittest\n\nclass TestSkjkasdkd2(unittest.TestCase):\n    def test_skjkasdkd(self):\n        self.assertEqual(skjkasdkd([10, 11, 12, 13, 14, 15]), 4)\n*****\nimport unittest\n\nclass TestSkjkasdkd3(unittest.TestCase):\n    def test_skjkasdkd(self):\n        self.assertEqual(skjkasdkd([17, 18, 19, 20, 21, 22]), 8)"
  },
  "97": {
    "diff": "moderate",
    "result_prompts": "def multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10",
    "result_tests": "import unittest\n\nclass TestMultiplyPositiveNumbers(unittest.TestCase):\n    def test_multiply_positive_numbers(self):\n        self.assertEqual(multiply(5, 5), 5)\n        self.assertEqual(multiply(10, 10), 0)\n        self.assertEqual(multiply(7, 3), 1)\n\n*****\n\nimport unittest\n\nclass TestMultiplyNegativeNumbers(unittest.TestCase):\n    def test_multiply_negative_numbers(self):\n        self.assertEqual(multiply(-5, -5), 5)\n        self.assertEqual(multiply(-10, -10), 0)\n        self.assertEqual(multiply(-7, -3), 1)\n\n*****\n\nimport unittest\n\nclass TestMultiplyMixedNumbers(unittest.TestCase):\n    def test_multiply_mixed_numbers(self):\n        self.assertEqual(multiply(-5, 5), 5)\n        self.assertEqual(multiply(10, -10), 0)\n        self.assertEqual(multiply(-7, 3), 1)"
  },
  "40": {
    "diff": "hard",
    "result_prompts": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False",
    "result_tests": "import unittest\n\nclass TestTriplesSumToOne(unittest.TestCase):\n    def test_triples_sum_to_zero(self):\n        self.assertTrue(triples_sum_to_zero([-5, -2, -1, 0, 1, 2, 3]))\n\n*****\n\nimport unittest\n\nclass TestTriplesSumToZeroNegative(unittest.TestCase):\n    def test_triples_sum_to_zero_negative(self):\n        self.assertFalse(triples_sum_to_zero([-5, -4, -3, -2, -1]))\n\n*****\n\nimport unittest\n\nclass TestTriplesSumToZeroPositive(unittest.TestCase):\n    def test_triples_sum_to_zero_positive(self):\n        self.assertFalse(triples_sum_to_zero([1, 2, 3, 4, 5]))\n\n*****\n\nimport unittest\n\nclass TestTriplesSumToZeroEmpty(unittest.TestCase):\n    def test_triples_sum_to_zero_empty(self):\n        self.assertFalse(triples_sum_to_zero([]))"
  },
  "44": {
    "diff": "hard",
    "result_prompts": "def change_base(x: int, base: int):\n    convertString = \"0123456789\"\n    if x < base:\n        return convertString[x]\n    else:\n        return change_base(x // base, base) + convertString[x % base]",
    "result_tests": "class TestChangeBase1:\n    import unittest\n\n    class TestChangeBase(unittest.TestCase):\n        def test_change_base(self):\n            self.assertEqual(change_base(10, 2), '1010')\n\n*****\n\nclass TestChangeBase2:\n    import unittest\n\n    class TestChangeBase(unittest.TestCase):\n        def test_change_base(self):\n            self.assertEqual(change_base(10, 8), '12')\n\n*****\n\nclass TestChangeBase3:\n    import unittest\n\n    class TestChangeBase(unittest.TestCase):\n        def test_change_base(self):\n            self.assertEqual(change_base(10, 10), '10')\n\n*****\n\nclass TestChangeBase4:\n    import unittest\n\n    class TestChangeBase(unittest.TestCase):\n        def test_change_base(self):\n            self.assertEqual(change_base(0, 2), '0')"
  },
  "48": {
    "diff": "hard",
    "result_prompts": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]",
    "result_tests": "import unittest\n\nclass TestIsPalindrome1(unittest.TestCase):\n    def test_is_palindrome_single_character(self):\n        self.assertTrue(is_palindrome(\"a\"))\n\n*****\nimport unittest\n\nclass TestIsPalindrome2(unittest.TestCase):\n    def test_is_palindrome_even_length(self):\n        self.assertTrue(is_palindrome(\"madam\"))\n\n*****\nimport unittest\n\nclass TestIsPalindrome3(unittest.TestCase):\n    def test_is_palindrome_odd_length(self):\n        self.assertTrue(is_palindrome(\"radar\"))\n\n*****\nimport unittest\n\nclass TestIsPalindrome4(unittest.TestCase):\n    def test_is_not_palindrome(self):\n        self.assertFalse(is_palindrome(\"hello\"))"
  },
  "66": {
    "diff": "hard",
    "result_prompts": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())",
    "result_tests": "import unittest\n\nclass TestDigitSum1(unittest.TestCase):\n    def test_digitSum(self):\n        self.assertEqual(digitSum(\"abc\"), 0)\n\n*****\n\nimport unittest\n\nclass TestDigitSum2(unittest.TestCase):\n    def test_digitSum(self):\n        self.assertEqual(digitSum(\"ABC\"), 65 + 66 + 67)\n\n*****\n\nimport unittest\n\nclass TestDigitSum3(unittest.TestCase):\n    def test_digitSum(self):\n        self.assertEqual(digitSum(\"aBc\"), 66)\n\n*****\n\nimport unittest\n\nclass TestDigitSum4(unittest.TestCase):\n    def test_digitSum(self):\n        self.assertEqual(digitSum(\"\"), 0)"
  },
  "67": {
    "diff": "hard",
    "result_prompts": "def fruit_distribution(s,n):\n    apples, oranges = map(int, s.replace(\"apples\", \"\").replace(\"oranges\", \"\").replace(\"and\", \"\").split())\n    return n - apples - oranges",
    "result_tests": "import unittest\n\nclass TestFruitDistribution1(unittest.TestCase):\n    def test_fruit_distribution(self):\n        self.assertEqual(fruit_distribution(\"5 apples and 3 oranges\", 10), 2)\n\n*****\n\nimport unittest\n\nclass TestFruitDistribution2(unittest.TestCase):\n    def test_fruit_distribution(self):\n        self.assertEqual(fruit_distribution(\"10 apples and 5 oranges\", 20), 5)\n\n*****\n\nimport unittest\n\nclass TestFruitDistribution3(unittest.TestCase):\n    def test_fruit_distribution(self):\n        self.assertEqual(fruit_distribution(\"7 apples and 2 oranges\", 15), 6)\n\n*****\n\nimport unittest\n\nclass TestFruitDistribution4(unittest.TestCase):\n    def test_fruit_distribution(self):\n        self.assertEqual(fruit_distribution(\"1 apples and 1 oranges\", 5), 3)"
  },
  "86": {
    "diff": "hard",
    "result_prompts": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())",
    "result_tests": "import unittest\n\nclass TestAntiShuffle1(unittest.TestCase):\n    def test_anti_shuffle(self):\n        self.assertEqual(anti_shuffle(\"hello world\"), \"ehllo dlroW\")\n\n*****\n\nimport unittest\n\nclass TestAntiShuffle2(unittest.TestCase):\n    def test_anti_shuffle(self):\n        self.assertEqual(anti_shuffle(\"listen silent\"), \"eilnst elinsT\")\n\n*****\n\nimport unittest\n\nclass TestAntiShuffle3(unittest.TestCase):\n    def test_anti_shuffle(self):\n        self.assertEqual(anti_shuffle(\"enlist silent\"), \"deilnst elinsT\")\n\n*****\n\nimport unittest\n\nclass TestAntiShuffle4(unittest.TestCase):\n    def test_anti_shuffle(self):\n        self.assertEqual(anti_shuffle(\"\"), \"\")"
  },
  "95": {
    "diff": "hard",
    "result_prompts": "def check_dict_case(dict):\n    if not dict:\n        return False\n    case = set(key.casefold() for key in dict)\n    return case == {'lower'} or case == {'upper'}",
    "result_tests": "import unittest\n\nclass TestCheckDictCase1(unittest.TestCase):\n    def test_empty_dict(self):\n        self.assertFalse(check_dict_case({}))\n\n*****\n\nimport unittest\n\nclass TestCheckDictCase2(unittest.TestCase):\n    def test_all_lower(self):\n        self.assertTrue(check_dict_case({'a': 1, 'b': 2, 'c': 3}))\n    def test_all_upper(self):\n        self.assertTrue(check_dict_case({'A': 1, 'B': 2, 'C': 3}))\n\n*****\n\nimport unittest\n\nclass TestCheckDictCase3(unittest.TestCase):\n    def test_mixed_case(self):\n        self.assertFalse(check_dict_case({'A': 1, 'b': 2, 'C': 3}))\n\n*****\n\nimport unittest\n\nclass TestCheckDictCase4(unittest.TestCase):\n    def test_single_key(self):\n        self.assertTrue(check_dict_case({'a': 1}))\n        self.assertTrue(check_dict_case({'A': 1}))"
  },
  "107": {
    "diff": "hard",
    "result_prompts": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
    "result_tests": "import unittest\n\nclass TestEvenOddPalindrome1(unittest.TestCase):\n    def test_even_odd_palindrome(self):\n        self.assertEqual(even_odd_palindrome(10), (2, 1))\n\n*****\n\nimport unittest\n\nclass TestEvenOddPalindrome2(unittest.TestCase):\n    def test_even_odd_palindrome(self):\n        self.assertEqual(even_odd_palindrome(20), (4, 2))\n\n*****\n\nimport unittest\n\nclass TestEvenOddPalindrome3(unittest.TestCase):\n    def test_even_odd_palindrome(self):\n        self.assertEqual(even_odd_palindrome(5), (1, 1))\n\n*****\n\nimport unittest\n\nclass TestEvenOddPalindrome4(unittest.TestCase):\n    def test_even_odd_palindrome(self):\n        self.assertEqual(even_odd_palindrome(1), (0, 1))"
  },
  "109": {
    "diff": "hard",
    "result_prompts": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False",
    "result_tests": "import unittest\n\nclass TestMoveOneBall1(unittest.TestCase):\n    def test_empty_array(self):\n        self.assertTrue(move_one_ball([]))\n\n*****\n\nimport unittest\n\nclass TestMoveOneBall2(unittest.TestCase):\n    def test_already_sorted_array(self):\n        self.assertTrue(move_one_ball([1, 2, 3, 4, 5]))\n\n*****\n\nimport unittest\n\nclass TestMoveOneBall3(unittest.TestCase):\n    def test_rotated_sorted_array(self):\n        self.assertTrue(move_one_ball([3, 4, 5, 1, 2]))\n\n*****\n\nimport unittest\n\nclass TestMoveOneBall4(unittest.TestCase):\n    def test_unsortable_array(self):\n        self.assertFalse(move_one_ball([5, 4, 3, 2, 1]))"
  },
  "112": {
    "diff": "hard",
    "result_prompts": "def reverse_delete(s,c):\n    s_set = set(c)\n    new_s = ''.join([char for char in s if char not in s_set])\n    return new_s, new_s == new_s[::-1]",
    "result_tests": "import unittest\n\nclass TestReverseDelete1(unittest.TestCase):\n    def test_reverse_delete(self):\n        self.assertEqual(reverse_delete(\"hello\", \"l\"), (\"heo\", False))\n\n*****\n\nimport unittest\n\nclass TestReverseDelete2(unittest.TestCase):\n    def test_reverse_delete(self):\n        self.assertEqual(reverse_delete(\"radar\", \"r\"), (\"a\", True))\n\n*****\n\nimport unittest\n\nclass TestReverseDelete3(unittest.TestCase):\n    def test_reverse_delete(self):\n        self.assertEqual(reverse_delete(\"hello\", \"\"), (\"hello\", False))\n\n*****\n\nimport unittest\n\nclass TestReverseDelete4(unittest.TestCase):\n    def test_reverse_delete(self):\n        self.assertEqual(reverse_delete(\"\", \"abc\"), (\"\", True))"
  },
  "128": {
    "diff": "hard",
    "result_prompts": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum",
    "result_tests": "import unittest\n\nclass TestProdSigns1(unittest.TestCase):\n    def test_prod_signs_empty_array(self):\n        self.assertIsNone(prod_signs([]))\n\n*****\n\nimport unittest\n\nclass TestProdSigns2(unittest.TestCase):\n    def test_prod_signs_positive_numbers(self):\n        self.assertEqual(prod_signs([1, 2, 3, 4, 5]), 15)\n\n*****\n\nimport unittest\n\nclass TestProdSigns3(unittest.TestCase):\n    def test_prod_signs_negative_numbers(self):\n        self.assertEqual(prod_signs([-1, -2, -3, -4, -5]), 0)\n\n*****\n\nimport unittest\n\nclass TestProdSigns4(unittest.TestCase):\n    def test_prod_signs_mixed_numbers(self):\n        self.assertEqual(prod_signs([1, -2, 3, -4, 5]), 0)"
  }
}