{
  "32": {
    "diff": "easy",
    "result_prompts": "def find_zero(xs: list):\n    if len(xs) % 2 == 0 and xs[-1] != 0:\n            x = 0\n            for _ in range(1000):\n                x_next = x - poly(xs, x) / ((x + 0.0001)**2 * poly(xs, x + x * (poly(xs, x + 0.0001) - poly(xs, x)) / 0.0001)\n                if abs(x_next - x) < 0.0001:\n                    return round(x, 2)\n                x = x_next\n        else:\n            raise ValueError(\"xs must have an even number of coefficients and the largest non-zero coefficient\")\n    return round(x, 2)",
    "result_tests": "import unittest\nimport math\n\nclass TestFindZero(unittest.TestCase):\n    def test_find_zero(self):\n        self.assertAlmostEqual(find_zero([1, -2, 1]), 1.0)\n        self.assertAlmostEqual(find_zero([1, -3, 2, -1]), 1.0)\n\n*****\n\nimport unittest\nimport math\n\nclass TestFindZeroError(unittest.TestCase):\n    def test_find_zero_error(self):\n        with self.assertRaises(ValueError):\n            find_zero([1, 2, 3])\n        with self.assertRaises(ValueError):\n            find_zero([1, -2, 0])"
  },
  "34": {
    "diff": "easy",
    "result_prompts": "def unique(l: list):\n    return sorted(set(l))",
    "result_tests": "import unittest\n\nclass TestUnique(unittest.TestCase):\n    def test_unique(self):\n        self.assertEqual(unique([1, 2, 2, 3, 6]), [1, 2, 3, 6])\n        self.assertEqual(unique(['a', 'b', 'c', 'a']), ['a', 'b', 'c'])\n\n*****\n\nimport unittest\n\nclass TestUniqueEdge(unittest.TestCase):\n    def test_unique_empty(self):\n        self.assertEqual(unique([]), [])\n        self.assertEqual(unique([1]), [1])"
  },
  "38": {
    "diff": "easy",
    "result_prompts": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
    "result_tests": "import unittest\n\nclass TestEncodeCyclic(unittest.TestCase):\n    def test_encode_cyclic(self):\n        self.assertEqual(\"bcaefgh\", encode_cyclic(\"abcdefgh\"))\n        self.assertEqual(\"abcdefgh\", encode_cyclic(\"bcaefgh\"))\n\n*****\n\nimport unittest\n\nclass TestDecodeCyclic(unittest.TestCase):\n    def test_decode_cyclic(self):\n        self.assertEqual(\"abcdefgh\", decode_cyclic(\"bcaefgh\"))\n        self.assertEqual(\"bcaefgh\", decode_cyclic(\"abcdefgh\"))"
  },
  "45": {
    "diff": "easy",
    "result_prompts": "def triangle_area(a, h):\n    return 0.5 * a * h",
    "result_tests": "import unittest\n\nclass TestTriangleArea(unittest.TestCase):\n    def test_triangle_area(self):\n        self.assertAlmostEqual(triangle_area(10, 5), 25.0)\n\n*****\n\nimport unittest\n\nclass TestTriangleArea2(unittest.TestCase):\n    def test_triangle_area2(self):\n        self.assertAlmostEqual(triangle_area(0, 5), 0.0)\n        self.assertAlmostEqual(triangle_area(-10, 5), -25.0)"
  },
  "50": {
    "diff": "easy",
    "result_prompts": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
    "result_tests": "import unittest\n\nclass TestCaesarCipher(unittest.TestCase):\n    def test_caesar_cipher(self):\n        self.assertEqual(\"khoor\", \"hello\".translate(str.maketrans(\"abcdefghijklmnopqrstuvwxyz\", \"bcdefghijklmnopqrstuxyz\")))\n\n*****\nimport unittest\n\nclass TestCaesarCipherEdgeCases(unittest.TestCase):\n    def test_caesar_cipher_empty_string(self):\n        self.assertEqual(\"\", \"\".translate(str.maketrans(\"abcdefghijklmnopqrstuvwxyz\", \"bcdefghijklmnopqrstuxyz\")))\n\n    def test_caesar_cipher_non_alphabetic_chars(self):\n        self.assertEqual(\"khoor\", \"he*llo\".translate(str.maketrans(\"abcdefghijklmnopqrstuvwxyz\", \"bcdefghijklmnopqrstuxyz\")))"
  },
  "83": {
    "diff": "easy",
    "result_prompts": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or i // 10**(n-1) == 1:\n            count += 1\n    return count",
    "result_tests": "import unittest\n\nclass TestStartsOneEnds(unittest.TestCase):\n    def test_starts_one_ends(self):\n        self.assertEqual(starts_one_ends(1), 1)\n        self.assertEqual(starts_one_ends(2), 20)\n*****\nimport unittest\n\nclass TestStartsOneEndsEdgeCases(unittest.TestCase):\n    def test_starts_one_ends_edge_cases(self):\n        self.assertEqual(starts_one_ends(0), 0)\n        self.assertEqual(starts_one_ends(-1), 0)"
  },
  "162": {
    "diff": "easy",
    "result_prompts": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
    "result_tests": "class TestStringToMd5:\n    import unittest\n    def test_string_to_md5(self):\n        self.assertIsNone(string_to_md5(\"*****\")\nclass TestStringToMd5:\n    import unittest\n    def test_string_to_md5(self):\n        self.assertEqual(string_to_md5(\"Hello, World!\"), \"65a78f39d35b0a6b7313794e246e5e97\")"
  },
  "28": {
    "diff": "easy",
    "result_prompts": "return ''.join(strings)",
    "result_tests": "import unittest\n\nclass TestJoinStrings(unittest.TestCase):\n    def test_join_strings(self):\n        self.assertEqual('', '')\n        \n    def test_join_strings_with_values(self):\n        self.assertEqual('hello world', 'hello' ' world')\n\n*****\n\nimport unittest\n\nclass TestJoinMultipleStrings(unittest.TestCase):\n    def test_join_multiple_strings(self):\n        self.assertEqual('hello world python', 'hello' ' world' ' python')\n        \n    def test_join_strings_with_empty(self):\n        self.assertEqual('hello', 'hello' '')"
  },
  "29": {
    "diff": "easy",
    "result_prompts": "return [s for s in strings if s.startswith(prefix)]",
    "result_tests": "import unittest\n\nclass TestStartsWith(unittest.TestCase):\n    def test_filter_strings(self):\n        strings = [\"apple\", \"banana\", \"apricot\", \"avocado\"]\n        prefix = \"a\"\n        expected = [\"apricot\", \"avocado\"]\n        self.assertEqual(expected, [s for s in strings if s.startswith(prefix)])\n\n*****\n\nimport unittest\n\nclass TestStartsWithEmpty(unittest.TestCase):\n    def test_empty_strings(self):\n        strings = []\n        prefix = \"a\"\n        expected = []\n        self.assertEqual(expected, [s for s in strings if s.startswith(prefix)])"
  },
  "33": {
    "diff": "moderate",
    "result_prompts": "def sort_third(l: list):\n    l_third = [x for i, x in enumerate(l) if i % 3 != 0]\n    l_third_sorted = sorted([x for i, x in enumerate(l) if i % 3 == 0])\n    result = []\n    i, j = 0, 0\n    for k in range(len(l)):\n        if k % 3 == 0:\n            result.append(l_third_sorted[i])\n            i += 1\n        else:\n            result.append(l_third[j])\n            j += 1\n    return result",
    "result_tests": "import unittest\n\nclass TestSort1(unittest.TestCase):\n    def test_sort_third(self):\n        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6]), [1, 4, 2, 5, 3, 6])\n\n*****\n\nimport unittest\n\nclass TestSort2(unittest.TestCase):\n        def test_sort_third_empty(self):\n            self.assertEqual(sort_third([]), [])\n\n*****\n\nimport unittest\n\nclass TestSort3(unittest.TestCase):\n    def test_sort_third_single(self):\n        self.assertEqual(sort_third([1]), [1])"
  },
  "37": {
    "diff": "moderate",
    "result_prompts": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    result = [l[i] if i % 2 != 0 else even_values.pop(0) for i in range(len(l))]\n    return result",
    "result_tests": "import unittest\n\nclass TestSortEvenFunction(unittest.TestCase):\n    def test_sort_even(self):\n        self.assertEqual([], [])\n\n    def test_sort_even_with_even_length(self):\n        self.assertEqual([1, 3, 2, 4], [1, 2, 3, 4])\n\n    def test_sort_even_with_odd_length(self):\n        self.assertEqual([1, 3, 2], [1, 3])\n\n*****\n\nimport unittest\n\nclass TestSortEvenFunctionWithNegativeNumbers(unittest.TestCase):\n    def test_sort_even_with_negative_numbers(self):\n        self.assertEqual([-2, 3, -1, [-2, -1, 3])\n\n*****\n\nimport unittest\n\nclass TestSortEvenFunctionWithDuplicates(unittest.TestCase):\n    def test_sort_even_with_duplicates(self):\n        self.assertEqual([1, 3, 2, 2], [1, 2, 2, 3])"
  },
  "42": {
    "diff": "moderate",
    "result_prompts": "def incr_list(l: list):\n    return [i + 1 for i in l]",
    "result_tests": "import unittest\n\nclass TestIncrList(unittest.TestCase):\n    def test_positive_numbers(self):\n        self.assertEqual([2, 3, 4], incr_list([1, 2, 3]))\n\n*****\nimport unittest\n\nclass TestIncrList(unittest.TestCase):\n    def test_negative_numbers(self):\n        self.assertEqual([-4, -3, -2], incr_list([-5, -4, -3]))\n\n*****\nimport unittest\n\nclass TestIncrListEdgeCases(unittest.TestCase):\n    def test_empty_list(self):\n            self.assertEqual([], incr_list([]))\n\n*****\nimport unittest\n\nclass TestIncrListNonIntegers(unittest.TestCase):\n    def test_non_integer_input(self):\n        with self.assertRaises(TypeError):\n            incr_list(['a', 'b', 'c'])"
  },
  "53": {
    "diff": "moderate",
    "result_prompts": "def add(x: int, y: int) -> int:\n    return x + y",
    "result_tests": "import unittest\n\nclass TestAddFunction(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(3, 1 + 2)\n        self.assertEqual(-1, -2 + 3)\n\n*****\n\nimport unittest\n\nclass TestAddFunctionNegative(unittest.TestCase):\n    def test_add_negative(self):\n        self.assertEqual(-3, -1 + -2)\n        self.assertEqual(0, -1 + 1"
  },
  "59": {
    "diff": "moderate",
    "result_prompts": "def largest_prime_factor(n: int):\n    def is_prime(m: int) -> bool:\n        if m < 2:\n            return False\n        for i in range(2, int(m ** 0.5 + 1):\n            if m % i == 0:\n                return False\n        return True\n    for i in range(n - 1, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i",
    "result_tests": "import unittest\n\nclass TestLargestPrimeFactor(unittest.TestCase):\n\n    def test_largest_prime_factor(self):\n        self.assertEqual(largest_prime_factor(13195), 29)\n        self.assertEqual(largest_prime_factor(600851475143), 6857)\n\n*****\n\nimport unittest\n\nclass TestLargestPrimeFactor(unittest.TestCase):\n\n    def test_largest_prime_factor_edge_case(self):\n        self.assertEqual(largest_prime_factor(131), 131)\n\n*****\n\nimport unittest\n\nclass TestLargestPrimeFactor(unittest.TestCase):\n\n    def test_largest_prime_factor_small_numbers(self):\n        self.assertEqual(largest_prime_factor(7), 7)\n        self.assertEqual(largest_prime_factor(10), 5)"
  },
  "69": {
    "diff": "moderate",
    "result_prompts": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_num = -1\n    for num, count in freq.items():\n        if count >= num and num > max_num:\n            max_num = num\n    return max_num",
    "result_tests": "import unittest\n\nclass TestSearch1(unittest.TestCase):\n    def test_empty(self):\n        self.assertEqual(search([]), -1)\n\n*****\n\nimport unittest\n\nclass TestSearch2(unittest.TestCase):\n    def test_single(self):\n        self.assertEqual(search([1]), 1)\nimport unittest\n\nclass TestSearch3(unittest.TestCase):\n    def test_multiple(self):\n        self.assertEqual(search([1, 2, 2, 3, 3, 3]), 3)\n\n*****"
  },
  "90": {
    "diff": "moderate",
    "result_prompts": "def next_smallest(lst):\n    if len(lst) < 2:\n            return None\n        sorted_lst = sorted(set(lst))\n        if len(sorted_lst) < 2:\n            return None\n        return sorted_lst[1]",
    "result_tests": "import unittest\n\nclass TestNextSmallest(unittest.TestCase):\n    def test_next_smallest(self):\n        self.assertIsNone(next_smallest([1]))\n        self.assertIsNone(next_smallest([1, 1, 1]))\n\n*****\n\nimport unittest\n\nclass TestNextSmallest2(unittest.TestCase):\n    def test_next_smallest2(self):\n        self.assertEqual(next_smallest([1, 2, 3]), 2)\n        self.assertEqual(next_smallest([5, 5, 10]), 10)\n\n*****\n\nimport unittest\n\nclass TestNextSmallest3(unittest.TestCase):\n    def test_next_smallest3(self):\n        self.assertEqual(next_smallest([-5, -5, 0]), 0)\n        self.assertEqual(next_smallest([10, 20, 20]), 20)"
  },
  "91": {
    "diff": "moderate",
    "result_prompts": "def is_bored(S):\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    return sum(sentence.strip().startswith('I') for sentence in sentences if sentence)",
    "result_tests": "import unittest\n\nclass TestIsBored1(unittest.TestCase):\n    def test_is_bored(self):\n        self.assertEqual(is_bored(\"\"), 0)\n\n*****\n\nimport unittest\n\nclass TestIsBored2(unittest.TestCase):\n    def test_is_bored_multiple_sentences(self):\n        self.assertEqual(is_bored(\"I am bored. You are not.\"), 1)\n\n*****\n\nimport unittest\n\nclass TestIsBored3(unittest.TestCase):\n    def test_is_bored_multiple_sentences_with_punctuation(self):\n        self.assertEqual(is_bored(\"I am bored! You are not.\"), 1)"
  },
  "94": {
    "diff": "moderate",
    "result_prompts": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max([x for x in lst if is_prime(x)])\n    return sum(int(digit) for digit in str(max_prime))",
    "result_tests": "import unittest\n\nclass TestSkjkasdkd1(unittest.TestCase):\n    def test_skjkasdkd(self):\n        self.assertEqual(skjkasdkd([2, 3, 5, 7]), 10)\n\n*****\n\nimport unittest\n\nclass TestSkjkasdkd2(unittest.TestCase):\n    def test_skjkasdkd(self):\n        self.assertEqual(skjkasdkd([10, 11, 13]), 6)\n\n*****\n\nimport unittest\n\nclass TestSkjkasdkd3(unittest.TestCase):\n    def test_skjkasdkd(self):\n        self.assertEqual(skjkasdkd([2, 3, 5, 7, 11, 13]), 6)"
  },
  "97": {
    "diff": "moderate",
    "result_prompts": "def multiply(a, b):\n    a_unit_digit = abs(a) % 10\n    b_unit_digit = abs(b) % 10\n    product = a_unit_digit * b_unit_digit\n    return product",
    "result_tests": "import unittest\n\nclass TestMultiplyPositiveNumbers(unittest.TestCase):\n    def test_multiply_two_digit_numbers(self):\n        self.assertEqual(multiply(12, 13), 6)\n        self.assertEqual(multiply(14, 15), 0)\n\n*****\n\nimport unittest\n\nclass TestMultiplyNegativeNumbers(unittest.TestCase):\n    def test_multiply_two_negative_numbers(self):\n        self.assertEqual(multiply(-12, -13), 6)\n        self.assertEqual(multiply(-14, -15), 0)\n\n*****\n\nimport unittest\n\nclass TestMultiplyMixedNumbers(unittest.TestCase):\n    def test_multiply_positive_and_negative_numbers(self):\n        self.assertEqual(multiply(12, -13), 6)\n        self.assertEqual(multiply(-14, 15), 0)"
  },
  "40": {
    "diff": "hard",
    "result_prompts": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False",
    "result_tests": "import unittest\n\nclass TestTriplesSumToOne(unittest.TestCase):\n    def test_triples_sum_to_zero(self):\n        self.assertTrue(triples_sum_to_zero([-1, 0, 1, 2, - - - - - - - - - - - -\n\nimport unittest\n\nclass TestTriplesSumToZero(unittest.TestCase):\n    def test_triples_sum_to_zero(self):\n        self.assertFalse(triples_sum_to_zero([1, 2, 3, 4, 5]))\n\n*****"
  },
  "44": {
    "diff": "hard",
    "result_prompts": "def change_base(x: int, base: int):\n    convertString = \"0123456789\"\n        if x < base:\n            return convertString[x]\n        else:\n            return change_base(x // base, base) + convertString[x % base]",
    "result_tests": "class TestChangeBase1:\n    import unittest\n    class TestChangeBase(unittest.TestCase):\n        def test_change_base(self):\n            self.assertEqual(change_base(10, 2), '1010')\n\n*****\n\nclass TestChangeBase2:\n    import unittest\n    class TestChangeBase(unittest.TestCase):\n        def test_change_base(self):\n            self.assertEqual(change_base(10, 10)\n\n*****\n\nclass TestChangeBase3:\n    import unittest\n    class TestChangeBase(unittest.TestCase):\n        def test_change_base(self):\n            self.assertEqual(change_base(10, 8), '12')\n\n*****\n\nclass TestChangeBase4:\n    import unittest\n    class TestChangeBase(unittest.TestCase):\n        def test_change_base(self):\n            self.assertEqual(change_base(0, 2), '0')"
  },
  "48": {
    "diff": "hard",
    "result_prompts": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]",
    "result_tests": "import unittest\n\nclass TestIsPalindrome1(unittest.TestCase):\n    def test_is_palindrome(self):\n        self.assertTrue(\"radar\" == \"radar\"[::-1])\n\n*****\n\nimport unittest\n\nclass TestIsPalindrome2(unittest.TestCase):\n    def test_is_palindrome(self):\n        self.assertFalse(\"hello\" == \"hello\"[::-1])\n\n*****\n\nimport unittest\n\nclass TestIsPalindrome3(unittest.TestCase):\n    def test_is_palindrome(self):\n        self.assertTrue(\"a\" == \"a\"[::-1])\n\n*****\n\nimport unittest\n\nclass TestIsPalindrome4(unittest.TestCase):\n    def test_is_palindrome(self):\n        self.assertTrue(\"racecar\" == \"racecar\"[::-1])"
  },
  "66": {
    "diff": "hard",
    "result_prompts": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())",
    "result_tests": "import unittest\n\nclass TestDigitSum1(unittest.TestCase):\n    def test_digitSum(self):\n        self.assertEqual(digitSum(\"abc\"), 0)\n        self.assertEqual(digitSum, \"abc\")  # This test should fail\n\n*****\n\nimport unittest\n\nclass TestDigitSum2(unittest.TestCase):\n    def test_digitSum(self):\n        self.assertEqual(digitSum(\"ABC\"), 198)\n        self.assertEqual(digitSum(\"aBc\"), 66)\n\n*****\n\nimport unittest\n\nclass TestDigitSum3(unittest.TestCase):\n    def test_digitSum(self):\n        self.assertEqual(digitSum(\"\"), 0)\n        self.assertEqual(digitSum(\" \"), 0)\nimport unittest\n\n*****\n\nimport unittest\n\nclass TestDigitSum4(unittest.TestCase):\n    def test_digitSum(self):\n        self.assertEqual(digitSum(\"123\"), 0)\n        self.assertEqual(digitSum(\"ABC123\"), 198)"
  },
  "67": {
    "diff": "hard",
    "result_prompts": "def fruit_distribution(s,n):\n    s = s.replace(\" apples and \", \" \").replace(\" oranges\", \"\")\n    apples, oranges = map(int, s.split())\n    return n - apples - oranges",
    "result_tests": "import unittest\n\nclass TestFruitDistribution1(unittest.TestCase):\n    def test_fruit_distribution(self):\n        self.assertEqual(fruit_distribution('5 apples and 3', 10), 2)\n\n*****\n\nimport unittest\n\nclass TestFruitDistribution2(unittest.TestCase):\n    def test_fruit_distribution(self):\n        self.assertEqual(fruit_distribution('10 apples and 5', 20), 5)\n\n*****\n\nimport unittest\n\nclass TestFruitDistribution3(unittest.TestCase):\n    def test_fruit_distribution(self):\n        self.assertEqual(fruit_distribution('7 apples and 2', 15), 6)\n\n*****\n\nimport unittest\n\nclass TestFruitDistribution4(unittest.TestCase):\n    def test_fruit_distribution(self):\n        self.assertEqual(fruit_distribution('15 apples and 10', 30), 5)"
  },
  "86": {
    "diff": "hard",
    "result_prompts": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(c))) for c in s.split())",
    "result_tests": "import unittest\n\nclass TestAntiShuffle1(unittest.TestCase):\n    def test_anti_shuffle(self):\n        self.assertEqual(anti_shuffle(\"hello world\"), \"dehllloorw\")\n\n*****\n\nimport unittest\n\nclass TestAntiShuffle2(unittest.TestCase):\n    def test_anti_shuffle_empty(self):\n        self.assertEqual(anti_shuffle(\"\"), \"\")\n\n*****\n\nimport unittest\n\nclass TestAntiShuffle3(unittest.TestCase):\n    def test_anti_shuffle_single_word(self):\n        self.assertEqual(anti_shuffle(\"hello\"), \"ehllo\")\n\n*****\n\nimport unittest\n\nclass TestAntiShuffle4(unittest.TestCase):\n    def test_anti_shuffle_multiple_words(self):\n        self.assertEqual(anti_shuffle(\"hello world again\"), \"aadeeghllnoorw\")"
  },
  "95": {
    "diff": "hard",
    "result_prompts": "def check_dict_case(dict):\n    if not dict:\n        return False\n    case = None\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            if case is None:\n                case = 'lower'\n            elif case != 'lower':\n                return False\n        elif key.isupper':\n            if case is None:\n                case = 'upper'\n            elif case != 'upper':\n                return False\n        else:\n            return False\n    return True",
    "result_tests": "import unittest\n\nclass TestCheckDictCase(unittest.TestCase):\n    def test_empty_dict(self):\n        self.assertFalse(check_dict_case({}))\n\n*****\n\nimport unittest\n\nclass TestCheckDictCaseLower(unittest.TestCase):\n    def test_lower_case(self):\n        self.assertTrue(check_dict_case({'a': 1, 'b': 2, 'c': 3}))\n\n*****\n\nimport unittest\n\nclass TestCheckDictCaseUpper(unittest.TestCase):\n    def test_upper_case(self):\n        self.assertTrue(check_dict_case({'A': 1, 'B': 2, 'C': 3}))\n\n*****\n\nimport unittest\n\nclass TestCheckDictCaseMixed(unittest.TestCase):\n    def test_mixed_case(self):\n        self.assertFalse(check_dict_case({'A': 1, 'b': 2, 'C': 3}))"
  },
  "107": {
    "diff": "hard",
    "result_prompts": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
    "result_tests": "import unittest\n\nclass TestEvenOddPalindrome1(unittest.TestCase):\n    def test_even_odd_palindrome(self):\n        self.assertEqual((1, 0), (1, 0)))\n\n*****\n\nimport unittest\n\nclass TestEvenOddPalindrome2(unittest.TestCase):\n    def test_even_odd_palindrome(self):\n        self.assertEqual((2, 0), (2, 0))\n\n*****\n\nimport unittest\n\nclass TestEvenOddPalindrome3(unittest.TestCase):\n    def test_even_odd_palindrome(self):\n        self.assertEqual((1, 3), (1, 3))\n\n*****\n\nimport unittest\n\nclass TestEvenOddPalindrome4(unittest.TestCase):\n    def test_even_odd_palindrome(self):\n        self.assertEqual((2, 4), (2, 4))"
  },
  "109": {
    "diff": "hard",
    "result_prompts": "def move_one_ball(arr):\n    if not arr:\n            return True\n        min_idx = arr.index(min(arr))\n        return arr[min_idx:] + arr[:min_idx] == sorted(arr)",
    "result_tests": "import unittest\n\nclass TestMoveOneBall(unittest.TestCase):\n    def test_empty(self):\n        self.assertTrue(move_one_ball([]))\n\n*****\nimport unittest\n\nclass TestMoveOneBall2(unittest.TestCase):\n    def test_single_element(self):\n        self.assertTrue(move_one_ball([5]))\n\n*****\nimport unittest\n\nclass TestMoveOneBall3(unittest.TestCase):\n    def test_multiple_elements(self):\n        self.assertTrue(move_one_ball([5, 3, 1, 4]))\n\n*****\nimport unittest\n\nclass TestMoveOneBall4(unittest.TestCase):\n    def test_unsorted(self):\n        self.assertFalse(move_one_ball([5, 3, 1, 4]))"
  },
  "112": {
    "diff": "hard",
    "result_prompts": "def reverse_delete(s,c):\n    s = ''.join(i for i in s if i not in c)\n    return (s, s == s[::-1])",
    "result_tests": "import unittest\n\nclass TestReverseDelete1(unittest.TestCase):\n    def test_reverse_delete(self):\n        self.assertEqual(reverse_delete(\"hello\", \"l\",), (\"heo\", False))\n\n*****\n\nimport unittest\n\nclass TestReverseDelete2(unittest.TestCase):\n    def test_reverse_delete(self):\n        self.assertEqual(reverse_delete(\"radar\", \"a\"), (\"rdr\", True))\n\n*****\n\nimport unittest\n\nclass TestReverseDelete3(unittest.TestCase):\n    def test_reverse_delete(self):\n        self.assertEqual(reverse_delete(\"hello\", \"h\"), (\"ello\", False))\n\n*****\n\nimport unittest\n\nclass TestReverseDelete4(unittest.TestCase):\n    def test_reverse_delete(self):\n        self.assertEqual(reverse_delete(\"aabb\", \"ab\"), (\"\", False))"
  },
  "128": {
    "diff": "hard",
    "result_prompts": "def prod_signs(arr):\n    if not arr:\n        return None\n    prod = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n        magnitude_sum += abs(num)\n    return prod * magnitude_sum",
    "result_tests": "import unittest\n\nclass TestProdSignsEmptyArray(unittest.TestCase):\n    def test_prod_signs(self):\n        self.assertIsNone(prod_signs([]))\n\n*****\n\nimport unittest\n\nclass TestProdSignsPositiveNumbers(unittest.TestCase):\n    def test_prod_signs(self):\n        self.assertEqual(prod_signs([1, 2, 3]), 6)\n\n*****\n\nimport unittest\n\nclass TestProdSignsNegativeNumbers(unittest.TestCase):\n    def test_prod_signs(self):\n        self.assertEqual(prod_signs([-1, -2, -3]), -6)\n\n*****\n\nimport unittest\n\nclass TestProdSignsMixedNumbers(unittest.TestCase):\n    def test_prod_signs(self):\n        self.assertEqual(prod_signs([1, -2, 3]), -6)"
  }
}