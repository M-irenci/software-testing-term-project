{
  "32": {
    "diff": "easy",
    "result_prompts": "```python\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\nNewton-Raphson method should be included.\n   >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    x = 0.0\n    for _ in range(100):\n        f_x = poly(xs, x)\n        f_prime_x = 0.0\n        for i, coeff in enumerate(xs[1:]):\n            f_prime_x += (i + 1) * coeff * math.pow(x, i)\n        if abs(f_prime_x) < 1e-6:\n            break\n        x -= f_x / f_prime_x\n    return x\n```",
    "result_tests": "```python\nimport unittest\nimport math\n\nclass TestFindZero(unittest.TestCase):\n    def test_linear_polynomial(self):\n        coeffs = [1, 2]\n        result = find_zero(coeffs)\n        self.assertAlmostEqual(result, -0.5, places=5)\n\n    def test_cubic_polynomial(self):\n        coeffs = [-6, 11, -6, 1]\n        result = find_zero(coeffs)\n        # One of the roots is 1.0\n        self.assertAlmostEqual(result, 1.0, places=5)\n```\n```python\nimport unittest\nimport math\n\nclass TestFindZero(unittest.TestCase):\n    def test_simple_quadratic(self):\n        coeffs = [2, 3, 1] # x^2 + 3x + 2 = (x+1)(x+2), roots -1, -2\n        result = find_zero(coeffs)\n        self.assertTrue(abs(poly(coeffs, result)) < 0.001)\n\n    def test_another_cubic_polynomial(self):\n        coeffs = [-12, 7, 1, -1]  # -(x-3)(x+2)(x-2)\n        result = find_zero(coeffs)\n        self.assertTrue(abs(poly(coeffs, result)) < 0.001)\n```"
  },
  "34": {
    "diff": "easy",
    "result_prompts": "```python\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestUnique(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(unique([]), [])\n\n    def test_list_with_duplicates(self):\n        self.assertEqual(unique([1, 2, 2, 3, 4, 4, 5]), [1, 2, 3, 4, 5])\n```\n```python\nimport unittest\n\nclass TestUnique(unittest.TestCase):\n    def test_already_unique_list(self):\n        self.assertEqual(unique([1, 2, 3]), [1, 2, 3])\n\n    def test_list_with_negative_numbers(self):\n        self.assertEqual(unique([-1, 0, -1, 2, 3, -2, 2]), [-2, -1, 0, 2, 3])\n```"
  },
  "38": {
    "diff": "easy",
    "result_prompts": "```python\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n   encode_cyclic function should be in the response without any change\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestCyclicEncoding(unittest.TestCase):\n\n    def test_encode_cyclic_empty_string(self):\n        self.assertEqual(encode_cyclic(\"\"), \"\")\n\n    def test_encode_cyclic_multiple_of_3(self):\n        self.assertEqual(encode_cyclic(\"abcdef\"), \"bcadef\")\n```\n"
  },
  "45": {
    "diff": "easy",
    "result_prompts": "```python\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestTriangleArea(unittest.TestCase):\n\n    def test_positive_values(self):\n        self.assertEqual(triangle_area(5, 3), 7.5)\n\n    def test_zero_base(self):\n        self.assertEqual(triangle_area(0, 5), 0)\n```\n\n```python\nimport unittest\nimport math\n\nclass TestTriangleArea(unittest.TestCase):\n\n    def test_typical_case(self):\n        self.assertAlmostEqual(triangle_area(10, 5), 25.0)\n\n    def test_large_values(self):\n        self.assertAlmostEqual(triangle_area(1000, 200), 100000.0)\n```\n"
  },
  "50": {
    "diff": "easy",
    "result_prompts": "```python\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestShift(unittest.TestCase):\n    def test_encode_shift_empty_string(self):\n        self.assertEqual(encode_shift(\"\"), \"\")\n\n    def test_decode_shift_mixed_case(self):\n        self.assertEqual(decode_shift(\"mjqqt\"), \"hello\")\n```\n"
  },
  "83": {
    "diff": "easy",
    "result_prompts": "```python\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n   Exclude numbers that start with zero like \"01\", \"021\".\n     \"\"\"\n    if n == 1:\n        return 1\n    total = 0\n    start_with_one = 10 ** (n - 1)\n    end_with_one = 9 * (10 ** (n - 2))\n    start_and_end_with_one = 10 ** (n - 2)\n    total = start_with_one + end_with_one - start_and_end_with_one\n    return total\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestStartsOneEnds(unittest.TestCase):\n    def test_n_equals_1(self):\n        self.assertEqual(starts_one_ends(1), 1)\n\n    def test_n_equals_3(self):\n        self.assertEqual(starts_one_ends(3), 180)\n```\n"
  },
  "162": {
    "diff": "easy",
    "result_prompts": "```python\nimport hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash\n```",
    "result_tests": "```python\nimport unittest\nimport hashlib\n\nclass TestStringToMd5(unittest.TestCase):\n    def test_empty_string(self):\n        self.assertIsNone(string_to_md5(''))\n\n    def test_valid_string(self):\n        self.assertEqual(string_to_md5('Test String'), hashlib.md5('Test String'.encode('utf-8')).hexdigest())\n```\n\n```python\nimport unittest\nimport hashlib\n\nclass TestStringToMd5(unittest.TestCase):\n\n    def test_non_empty_string(self):\n        test_string = \"This is a test.\"\n        expected_hash = hashlib.md5(test_string.encode('utf-8')).hexdigest()\n        self.assertEqual(string_to_md5(test_string), expected_hash)\n\n    def test_string_with_special_characters(self):\n        test_string = \"!@#$%^&*()\"\n        expected_hash = hashlib.md5(test_string.encode('utf-8')).hexdigest()\n        self.assertEqual(string_to_md5(test_string), expected_hash)\n```"
  },
  "28": {
    "diff": "easy",
    "result_prompts": "```python\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = ''\n    for string in strings:\n        result += string\n    return result\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestConcatenate(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(concatenate([]), '')\n\n    def test_multiple_strings(self):\n        self.assertEqual(concatenate(['hello', ' ', 'world']), 'hello world')\n```\n\n```python\nimport unittest\n\nclass TestConcatenate(unittest.TestCase):\n    def test_single_string(self):\n        self.assertEqual(concatenate(['test']), 'test')\n\n    def test_strings_with_numbers(self):\n        self.assertEqual(concatenate(['1', '2', '3']), '123')\n```\n"
  },
  "29": {
    "diff": "easy",
    "result_prompts": "```python\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n```",
    "result_tests": "```python\nimport unittest\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n\nclass TestFilterByPrefix(unittest.TestCase):\n\n    def test_empty_list(self):\n        self.assertEqual(filter_by_prefix([], 'a'), [])\n\n    def test_mixed_strings(self):\n        self.assertEqual(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'), ['abc', 'array'])\n```\n```python\nimport unittest\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n\nclass TestFilterByPrefix(unittest.TestCase):\n\n    def test_all_match(self):\n        self.assertEqual(filter_by_prefix(['apple', 'apricot', 'avocado'], 'ap'), ['apple', 'apricot'])\n\n    def test_no_match(self):\n        self.assertEqual(filter_by_prefix(['banana', 'cherry', 'date'], 'ap'), [])\n```"
  },
  "33": {
    "diff": "moderate",
    "result_prompts": "```python\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    indicies = []\n    values = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            indicies.append(i)\n            values.append(l[i])\n    values.sort()\n    for i in range(len(values)):\n        l[indicies[i]] = values[i]\n    return l\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestSortThird(unittest.TestCase):\n\n    def test_empty_list(self):\n        self.assertEqual(sort_third([]), [])\n\n    def test_no_multiples_of_three(self):\n        self.assertEqual(sort_third([1, 2]), [1, 2])\n\n    def test_all_multiples_of_three(self):\n        self.assertEqual(sort_third([3, 6, 9]), [3, 6, 9])\n```\n"
  },
  "37": {
    "diff": "moderate",
    "result_prompts": "```python\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indices = sorted([l[i] for i in range(0, len(l), 2)])\n    new_list = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_list.append(even_indices[even_index])\n            even_index += 1\n        else:\n            new_list.append(l[i])\n    return new_list\n```",
    "result_tests": "```python\ndef test_empty_list():\n    assert sort_even([]) == []\n\ndef test_single_element_list():\n    assert sort_even([5]) == [5]\n\ndef test_list_with_duplicate_even_elements():\n    assert sort_even([4, 2, 1, 8, 0, 9]) == [0, 2, 1, 8, 4, 9]\n```\n"
  },
  "42": {
    "diff": "moderate",
    "result_prompts": "```python\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestIncrList(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(incr_list([]), [])\n\n    def test_positive_numbers(self):\n        self.assertEqual(incr_list([1, 2, 3]), [2, 3, 4])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(incr_list([-1, 0, 1]), [0, 1, 2])\n```\n"
  },
  "53": {
    "diff": "moderate",
    "result_prompts": "```python\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestAdd(unittest.TestCase):\n\n    def test_positive_numbers(self):\n        self.assertEqual(add(2, 3), 5)\n\n    def test_negative_numbers(self):\n        self.assertEqual(add(-1, -1), -2)\n\n    def test_zero_and_positive(self):\n        self.assertEqual(add(0, 5), 5)\n```\n"
  },
  "59": {
    "diff": "moderate",
    "result_prompts": "```python\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n        i += 1\n    if n > 1:\n        return n\n    else:\n        return i - 1\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestLargestPrimeFactor(unittest.TestCase):\n\n    def test_prime_number(self):\n        self.assertEqual(largest_prime_factor(17), 17)\n\n    def test_composite_number(self):\n        self.assertEqual(largest_prime_factor(13195), 29)\n\n    def test_power_of_two(self):\n        self.assertEqual(largest_prime_factor(2048), 2)\n```\n"
  },
  "69": {
    "diff": "moderate",
    "result_prompts": "```python\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    counts = {}\n    for num in lst:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    eligible = []\n    for num, count in counts.items():\n        if num > 0 and count >= num:\n            eligible.append(num)\n            \n    if not eligible:\n        return -1\n    else:\n        return max(eligible)\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestSearch(unittest.TestCase):\n    def test_example_1(self):\n        self.assertEqual(search([4, 1, 2, 2, 3, 1]), 2)\n\n    def test_example_2(self):\n        self.assertEqual(search([1, 2, 2, 3, 3, 3, 4, 4, 4]), 3)\n\n    def test_example_3(self):\n        self.assertEqual(search([5, 5, 4, 4, 4]), -1)\n```"
  },
  "90": {
    "diff": "moderate",
    "result_prompts": "```python\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    unique_lst = sorted(list(set(lst)))\n    \n    if len(unique_lst) < 2:\n        return None\n    else:\n        return unique_lst[1]\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestNextSmallest(unittest.TestCase):\n    def test_basic(self):\n        self.assertEqual(next_smallest([1, 2, 3, 4, 5]), 2)\n\n    def test_unsorted(self):\n        self.assertEqual(next_smallest([5, 1, 4, 3, 2]), 2)\n\n    def test_no_second_smallest(self):\n        self.assertEqual(next_smallest([1, 1]), None)\n```\n"
  },
  "91": {
    "diff": "moderate",
    "result_prompts": "```python\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\" but not \"i\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    sentences = S.replace(\"?\", \".\").replace(\"!\", \".\").split(\".\")\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence and sentence.split()[0] == \"I\":\n            count += 1\n    return count\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestIsBored(unittest.TestCase):\n\n    def test_empty_string(self):\n        self.assertEqual(is_bored(\"\"), 0)\n\n    def test_multiple_bored_sentences(self):\n        self.assertEqual(is_bored(\"I am bored. I am really bored! I am super bored?\"), 3)\n\n    def test_mixed_case_and_non_bored_sentences(self):\n        self.assertEqual(is_bored(\"i am not bored. I am bored. You are bored.\"), 1)\n```\n"
  },
  "94": {
    "diff": "moderate",
    "result_prompts": "```python\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [num for num in lst if is_prime(num)]\n\n    if not primes:\n        return 0\n\n    largest_prime = max(primes)\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n\n    return sum_of_digits\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestSkjkasdkd(unittest.TestCase):\n\n    def test_empty_list(self):\n        self.assertEqual(skjkasdkd([]), 0)\n\n    def test_no_primes(self):\n        self.assertEqual(skjkasdkd([4, 6, 8, 9, 10]), 0)\n\n    def test_list_with_primes(self):\n        self.assertEqual(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]), 10)\n```"
  },
  "97": {
    "diff": "moderate",
    "result_prompts": "```python\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    return unit_a * unit_b\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestMultiply(unittest.TestCase):\n\n    def test_positive_numbers(self):\n        self.assertEqual(multiply(148, 412), 16)\n\n    def test_negative_numbers(self):\n        self.assertEqual(multiply(14, -15), 20)\n\n    def test_zero_in_unit_digit(self):\n        self.assertEqual(multiply(2020, 1851), 0)\n```\n"
  },
  "40": {
    "diff": "hard",
    "result_prompts": "```python\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestTriplesSumToZero(unittest.TestCase):\n\n    def test_empty_list(self):\n        self.assertFalse(triples_sum_to_zero([]))\n\n    def test_no_triples_sum_to_zero(self):\n        self.assertFalse(triples_sum_to_zero([1, 2, 3, 4, 5]))\n\n    def test_triples_sum_to_zero_exists(self):\n        self.assertTrue(triples_sum_to_zero([-1, 0, 1, 2, -2]))\n\n    def test_duplicate_numbers(self):\n        self.assertTrue(triples_sum_to_zero([0, 0, 0]))\n```\n"
  },
  "44": {
    "diff": "hard",
    "result_prompts": "```python\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestChangeBase(unittest.TestCase):\n\n    def test_zero_input(self):\n        self.assertEqual(change_base(0, 2), '0')\n\n    def test_base_2(self):\n        self.assertEqual(change_base(10, 2), '1010')\n\n    def test_base_8(self):\n        self.assertEqual(change_base(63, 8), '77')\n\n    def test_large_number(self):\n        self.assertEqual(change_base(12345, 3), '120111000')\n```\n"
  },
  "48": {
    "diff": "hard",
    "result_prompts": "```python\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n   Consider case sensitivity\n    \"\"\"\n    left = 0\n    right = len(text) - 1\n\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n\n    return True\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestIsPalindrome(unittest.TestCase):\n\n    def test_empty_string(self):\n        self.assertTrue(is_palindrome(\"\"))\n\n    def test_simple_palindrome(self):\n        self.assertTrue(is_palindrome(\"aba\"))\n\n    def test_non_palindrome(self):\n        self.assertFalse(is_palindrome(\"abc\"))\n\n    def test_case_sensitive_non_palindrome(self):\n        self.assertFalse(is_palindrome(\"Aba\"))\n```\n"
  },
  "66": {
    "diff": "hard",
    "result_prompts": "```python\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestDigitSum(unittest.TestCase):\n\n    def test_empty_string(self):\n        self.assertEqual(digitSum(\"\"), 0)\n\n    def test_mixed_case_string(self):\n        self.assertEqual(digitSum(\"abAB\"), 131)\n\n    def test_string_with_no_uppercase(self):\n        self.assertEqual(digitSum(\"abc\"), 0)\n\n    def test_string_with_only_uppercase(self):\n        self.assertEqual(digitSum(\"ABC\"), 198)\n```\n"
  },
  "67": {
    "diff": "hard",
    "result_prompts": "```python\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    s = s.lower()\n    apples = int(s.split(\"apples\")[0].split()[-1])\n    oranges = int(s.split(\"and\")[-1].split(\"oranges\")[0].strip())\n    mangoes = n - apples - oranges\n    return mangoes\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestFruitDistribution(unittest.TestCase):\n\n    def test_basic(self):\n        self.assertEqual(fruit_distribution(\"5 apples and 6 oranges\", 19), 8)\n\n    def test_zero_apples(self):\n        self.assertEqual(fruit_distribution(\"0 apples and 1 oranges\", 3), 2)\n\n    def test_large_total(self):\n        self.assertEqual(fruit_distribution(\"2 apples and 3 oranges\", 100), 95)\n\n    def test_large_apples(self):\n        self.assertEqual(fruit_distribution(\"100 apples and 1 oranges\", 120), 19)\n```\n"
  },
  "86": {
    "diff": "hard",
    "result_prompts": "```python\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestAntiShuffle(unittest.TestCase):\n\n    def test_empty_string(self):\n        self.assertEqual(anti_shuffle(\"\"), \"\")\n\n    def test_single_word(self):\n        self.assertEqual(anti_shuffle(\"hello\"), \"ehllo\")\n\n    def test_multiple_words(self):\n        self.assertEqual(anti_shuffle(\"Hello World!!!\"), \"Hello !!!Wdlor\")\n\n    def test_string_with_numbers(self):\n        self.assertEqual(anti_shuffle(\"123 abc\"), \"123 abc\")\n```\n"
  },
  "95": {
    "diff": "hard",
    "result_prompts": "```python\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    Utilize advanced logic for detecting case by setting \"lower\" or \"upper\" or \"title\" for corresponding cases  \"\"\"\n    if not dict:\n        return False\n    \n    case = None\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        \n        if key.islower():\n            if case is None:\n                case = \"lower\"\n            elif case != \"lower\":\n                return False\n        elif key.isupper():\n            if case is None:\n                case = \"upper\"\n            elif case != \"upper\":\n                return False\n        else:\n            return False\n            \n    return True\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestCheckDictCase(unittest.TestCase):\n    def test_empty_dict(self):\n        self.assertFalse(check_dict_case({}))\n\n    def test_all_lower_case(self):\n        self.assertTrue(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n\n    def test_all_upper_case(self):\n        self.assertTrue(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}))\n\n    def test_mixed_case(self):\n        self.assertFalse(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"}))\n```\n"
  },
  "107": {
    "diff": "hard",
    "result_prompts": "```python\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        s = str(i)\n        if s == s[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestEvenOddPalindrome(unittest.TestCase):\n\n    def test_n_3(self):\n        self.assertEqual(even_odd_palindrome(3), (1, 2))\n\n    def test_n_12(self):\n        self.assertEqual(even_odd_palindrome(12), (4, 6))\n\n    def test_n_1(self):\n        self.assertEqual(even_odd_palindrome(1), (0, 1))\n\n    def test_n_99(self):\n        self.assertEqual(even_odd_palindrome(99), (9, 18))\n```\n"
  },
  "109": {
    "diff": "hard",
    "result_prompts": "```python\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    \n    n = len(arr)\n    for i in range(n):\n        temp = arr[:]\n        for j in range(i):\n            last = temp.pop()\n            temp.insert(0, last)\n        \n        if all(temp[k] <= temp[k+1] for k in range(n-1)):\n            return True\n    return False\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestMoveOneBall(unittest.TestCase):\n\n    def test_empty_array(self):\n        self.assertTrue(move_one_ball([]))\n\n    def test_already_sorted(self):\n        self.assertTrue(move_one_ball([1, 2, 3, 4, 5]))\n\n    def test_shift_required(self):\n        self.assertTrue(move_one_ball([3, 4, 5, 1, 2]))\n\n    def test_not_possible(self):\n        self.assertFalse(move_one_ball([3, 5, 4, 1, 2]))\n```\n"
  },
  "112": {
    "diff": "hard",
    "result_prompts": "```python\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = \"\"\n    for i in s:\n        if i not in c:\n            res += i\n    if res == res[::-1]:\n        return (res,True)\n    else:\n        return (res,False)\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestReverseDelete(unittest.TestCase):\n    def test_empty_string(self):\n        self.assertEqual(reverse_delete(\"\", \"\"), (\"\", True))\n\n    def test_no_characters_to_delete(self):\n        self.assertEqual(reverse_delete(\"abcde\", \"f\"), (\"abcde\", False))\n\n    def test_all_characters_deleted(self):\n        self.assertEqual(reverse_delete(\"abc\", \"abc\"), (\"\", True))\n\n    def test_palindrome_result(self):\n        self.assertEqual(reverse_delete(\"abcdedcba\", \"ab\"), (\"cdedc\", True))\n```\n"
  },
  "128": {
    "diff": "hard",
    "result_prompts": "```python\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    product_of_signs = 1\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n\n    sum_of_magnitudes = 0\n    for num in arr:\n        sum_of_magnitudes += abs(num)\n\n    return sum_of_magnitudes * product_of_signs\n```",
    "result_tests": "```python\nimport unittest\n\nclass TestProdSigns(unittest.TestCase):\n\n    def test_empty_array(self):\n        self.assertIsNone(prod_signs([]))\n\n    def test_positive_and_negative_numbers(self):\n        self.assertEqual(prod_signs([1, 2, 2, -4]), -9)\n\n    def test_with_zero(self):\n        self.assertEqual(prod_signs([0, 1]), 0)\n\n    def test_all_positive_numbers(self):\n        self.assertEqual(prod_signs([1, 2, 3]), 6)\n```\n"
  }
}